from rest_framework import serializers

class ArangoModelSerializer(serializers.Serializer):
    # _key is readâ€“only because it is generated by ArangoDB.
    _key = serializers.CharField(read_only=True)

    def __init__(self, *args, **kwargs):
        # First, let the parent class initialize
        super().__init__(*args, **kwargs)
        # Check if the serializer subclass has a Meta with a 'fields' attribute.
        meta = getattr(self, 'Meta', None)
        if meta and hasattr(meta, 'fields'):
            for field_name in meta.fields:
                if field_name in self.fields:
                    continue  # Field already defined (e.g. _key)
                # You can decide here on a default field type; we use CharField as an example.
                self.fields[field_name] = serializers.CharField(required=False)


    def create(self, validated_data):
        # Instantiate the model using the Meta.model provided in the serializer subclass.
        model_class = self.Meta.model
        instance = model_class(**validated_data)
        instance.save()
        return instance

    def update(self, instance, validated_data):
        # Update each field from the validated data.
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance
